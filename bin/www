#!/usr/bin/env node

require('dotenv').config({ quiet: true })
const http = require('http')
const debug = require('debug')('poolsea-backend:server')
const app = require('../src/app')

const port = normalizePort(process.env.PORT || '8000')
app.set('port', port)

const server = http.createServer(app)

server.listen(port, () => {
  console.log(`🚀 WebServer running at: http://localhost:${port}`)
})
server.on('error', error => onError(error, port))
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10)
  if (isNaN(port)) return val // named pipe
  if (port >= 0) return port // port number
  return false
}

/**
 * Error handler
 */
function onError(error, port) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`)
      process.exit(1)
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`)
      process.exit(1)
    default:
      throw error
  }
}

/**
 * Listening event handler
 */
function onListening() {
  const addr = server.address()
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug(`Listening on ${bind}`)
}

/**
 * Handle unhandled exceptions & rejections
 */
process.on('uncaughtException', err => {
  console.error('❌ Uncaught Exception:', err)
  process.exit(1)
})

process.on('unhandledRejection', (reason, promise) => {
  console.error('❌ Unhandled Rejection at:', promise, 'reason:', reason)
  process.exit(1)
})

/**
 * Graceful shutdown on Ctrl+C
 */
process.on('SIGINT', () => {
  console.log('\n🛑 Gracefully shutting down...')
  server.close(() => {
    console.log('✅ Server closed.')
    process.exit(0)
  })
})
